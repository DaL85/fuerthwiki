package com.example.fuerthwiki;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import android.app.ListActivity;
import android.content.ClipData.Item;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.AdapterView.OnItemClickListener;

public class ReadWorksheetContentActivity extends ListActivity{

	//private static final String TAG = ReadWorksheetContentActivity.class.getSimpleName();
	private ArrayAdapter<String> excelItemArrayAdapter;
	String[] item_array=null;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {

		try {
			super.onCreate(savedInstanceState);   
			setContentView(R.layout.activity_getphotoname);
			//hier ListView mit allen Elementen anzeigen
			excelItemArrayAdapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1);//new CustomAdapter(this,R.id.textview_b_item);
	        setListAdapter(excelItemArrayAdapter);
	        
	        Intent i = getIntent();
	        String excelFile = i.getStringExtra(Constants.EXCELFILE);
	        String worksheet = i.getStringExtra(Constants.WORKSHEET);
	        excelItemArrayAdapter.addAll(getWorksheetContent(excelFile,worksheet));
	        excelItemArrayAdapter.notifyDataSetChanged();
			ListView lv = getListView();
			lv.setOnItemClickListener(new OnItemClickListener() {
				@Override
				public void onItemClick(AdapterView<?> arg0, View arg1,
						int arg2, long arg3) {
					Intent intent = new Intent();
					intent.putExtra(Constants.PHOTONAME, excelItemArrayAdapter.getItem(arg2));
					setResult(RESULT_OK, intent);
					finish();
				}
			});
	      
			//Element wählen lassen dann(aber noch abändern):
//			
			
		} catch (Exception e) {
			finish();
		}

	}

	
	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
		
	}

	@Override
	protected void onSaveInstanceState(Bundle outState) {
		
	}
	private List<String> getWorksheetContent(String excelFile, String worksheet) throws IOException  {
		List<String> resultSet = new ArrayList<String>();
	    File inputWorkbook = new File(excelFile);
	    FileInputStream FSInputWorkbook = new FileInputStream(excelFile);
	    if(inputWorkbook.exists()){
	        try {
	        	HSSFWorkbook w = new HSSFWorkbook(FSInputWorkbook);
	            // Get the first sheet
	            HSSFSheet sheet = w.getSheet(worksheet);
	            // Loop over column and lines
	            for (int j = 0; j < sheet.getPhysicalNumberOfRows(); j++) {
	                HSSFRow row = sheet.getRow(j);	                
                    for (int i = 0; i < row.getPhysicalNumberOfCells(); i++) {
                        HSSFCell cell = row.getCell(i);
                        String item = cell.getStringCellValue();
                        if(!item.equals(""))
                    	{
                        	int itemIndex = getItemIndex(item);
                        	if(itemIndex!=0)
                        		item = item+"("+String.valueOf(itemIndex)+")";
                        	resultSet.add(item);
                    	}                        	
                    }	                
	                continue;
	            }
	            w.close();
	        }catch (Exception e) {
	            e.printStackTrace();
	        }
	    }
	    else
	    {
	        resultSet.add("File not found..!");
	    }
	    if(resultSet.size()==0){
	        resultSet.add("Data not found..!");
	        resultSet.add("Evtl konnte das File nicht gelesen werden");
	        resultSet.add("Dokument als .xls speichern");
	    }
	    return resultSet;
    }
	private int getItemIndex(String item){
		File photo = new File(Constants.FUERTHWIKI_FOLDER+item+".jpg");
		int i=0;
		while(photo.exists())
		{
			i++;
			photo=new File(Constants.FUERTHWIKI_FOLDER+item+"("+i+")"+".jpg");
		}
	    return i;
	}

}
public class ItemAdapter extends ArrayAdapter {
//	  @Override
//	  public View getView(int i, View convertView, ViewGroup viewGroup) {
//	    convertView = mInflater.inflate(your layout); // Pseudo-code!
//	    if (i == 0) {
//	      convertView.setBackgroundColor(R.color.red);
//	    }
//	  }
	  
	// declaring our ArrayList of items
		private ArrayList<Item> objects;

		/* here we must override the constructor for ArrayAdapter
		* the only variable we care about now is ArrayList<Item> objects,
		* because it is the list of objects we want to display.
		*/
		public ItemAdapter(Context context, int textViewResourceId, ArrayList<Item> objects) {
			super(context, textViewResourceId, objects);
			this.objects = objects;
		}

		/*
		 * we are overriding the getView method here - this is what defines how each
		 * list item will look.
		 */
		public View getView(int position, View convertView, ViewGroup parent){

			// assign the view we are converting to a local variable
			View v = convertView;

			// first check to see if the view is null. if so, we have to inflate it.
			// to inflate it basically means to render, or show, the view.
			if (v == null) {
				LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				v = inflater.inflate(android.R.layout.simple_list_item_1,null);//R.layout.list_item, null);
			}

			/*
			 * Recall that the variable position is sent in as an argument to this method.
			 * The variable simply refers to the position of the current object in the list. (The ArrayAdapter
			 * iterates through the list we sent it)
			 * 
			 * Therefore, i refers to the current Item object.
			 */
			Item i = objects.get(position);

			if (i != null) {

//				// This is how you obtain a reference to the TextViews.
//				// These TextViews are created in the XML files we defined.
//
				TextView tt = (TextView) v.findViewById(R.id.toptext);
//				TextView ttd = (TextView) v.findViewById(R.id.toptextdata);
//				TextView mt = (TextView) v.findViewById(R.id.middletext);
//				TextView mtd = (TextView) v.findViewById(R.id.middletextdata);
//				TextView bt = (TextView) v.findViewById(R.id.bottomtext);
//				TextView btd = (TextView) v.findViewById(R.id.desctext);
//
//				// check to see if each individual textview is null.
//				// if not, assign some text!
//				if (tt != null){
//					tt.setText("Name: ");
//				}
//				if (ttd != null){
//					ttd.setText(i.getName());
//				}
//				if (mt != null){
//					mt.setText("Price: ");
//				}
//				if (mtd != null){
//					mtd.setText("$" + i.getPrice());
//				}
//				if (bt != null){
//					bt.setText("Details: ");
//				}
//				if (btd != null){
//					btd.setText(i.getDetails());
//				}
//			}
				String itemText = (String) i.getText();
				if(itemText.endsWith(")"))
				{
					if(itemText.substring(itemText.length()-2, itemText.length()-1).matches("[0-9]"))
						convertView.setBackgroundColor(Color.parseColor("#D3D3D3"));
				}
				

			// the view must be returned to our activity
			return v;

		}
	  
	  
	}
